# -*- coding: utf-8 -*-
"""
# @Time    : 2018/12/20 13:45
# @Author  : zyh
# @Email   : 2536593870@qq.com
# @File    :
#@Others   :
"""
import string
import re
import pandas as pd
import numpy as np
import keras.utils.np_utils as kutils


def convertSampleToProbMatr(sampleSeq3DArr):  # changed add one column for '1'
	"""
	Convertd the raw data to probability matrix

	PARAMETER
	---------
	sampleSeq3DArr: 3D numpy array
	   X denoted the unknow amino acid.


	probMatr: Probability Matrix for Samples. Shape (nb_samples, 1, nb_length_of_sequence, nb_AA)
	"""
	
	letterDict = {}
	letterDict["A"] = 0
	letterDict["C"] = 1
	letterDict["D"] = 2
	letterDict["E"] = 3
	letterDict["F"] = 4
	letterDict["G"] = 5
	letterDict["H"] = 6
	letterDict["I"] = 7
	letterDict["K"] = 8
	letterDict["L"] = 9
	letterDict["M"] = 10
	letterDict["N"] = 11
	letterDict["P"] = 12
	letterDict["Q"] = 13
	letterDict["R"] = 14
	letterDict["S"] = 15
	letterDict["T"] = 16
	letterDict["V"] = 17
	letterDict["W"] = 18
	letterDict["Y"] = 19
	letterDict["-"] = 20  ##add -
	AACategoryLen = 21  ##add -
	
	probMatr = np.zeros((len(sampleSeq3DArr), 1, len(sampleSeq3DArr[0]), AACategoryLen))
	
	sampleNo = 0
	for sequence in sampleSeq3DArr:
		
		AANo = 0
		for AA in sequence:
			
			if not AA in letterDict:
				probMatr[sampleNo][0][AANo] = np.full((1, AACategoryLen), 1.0 / AACategoryLen)
			
			else:
				index = letterDict[AA]
				probMatr[sampleNo][0][AANo][index] = 1
			
			AANo += 1
		sampleNo += 1
	
	return probMatr


def convertRawToXY(rawDataFrame, refMatrFileName="", nb_windows=3, codingMode=0)  :  # rawDataFrame is numpy.ndarray
	"""
	convertd the raw data to probability matrix and target array
	#Output:
	probMatr: Probability Matrix for Samples. Shape (nb_samples, 1, nb_length_of_sequence, nb_AA)
	targetArr: Target. Shape (nb_samples)
	"""
	
	# rawDataFrame = pd.read_table(fileName, sep='\t', header=None).values
	
	targetList = rawDataFrame[:, 0]
	targetList[np.where( targetList ==2)] = 0
	targetArr = kutils.to_categorical(targetList)
	
	sampleSeq3DArr = rawDataFrame[:, 1:]
	
	if codingMode == 0:
		probMatr = convertSampleToProbMatr(sampleSeq3DArr)
	elif codingMode == 1:
		probMatr = convertSampleToVector2DList(sampleSeq3DArr, nb_windows, refMatrFileName)
	elif codingMode == 2:
		probMatr = convertSampleToDoubleVec(sampleSeq3DArr, 1)
	elif codingMode == 3:
		probMatr = convertSampleToPhysicsVector(sampleSeq3DArr)
	elif codingMode == 4:
		probMatr = convertSampleToPhysicsVector_2(sampleSeq3DArr)
	return probMatr, targetArr
